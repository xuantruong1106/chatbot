import streamlit as st
import psycopg2
from rapidfuzz import process

# K·∫øt n·ªëi ƒë·∫øn PostgreSQL


def connect_to_postgresql():
    conn = psycopg2.connect(
        dbname="chatbot",
        user="postgres",
        password="andubadao123",
        host="localhost",
        port="5432"
    )
    return conn

# ƒê·ªçc d·ªØ li·ªáu t·ª´ PostgreSQL


def load_from_postgresql():
    conn = connect_to_postgresql()
    cursor = conn.cursor()
    cursor.execute("SELECT id, question, answer, category_id FROM faq_test")
    rows = cursor.fetchall()
    questions = [row[1] for row in rows]
    answers = {row[1]: row[2] for row in rows}
    category_ids = {row[1]: row[3] for row in rows}
    cursor.close()
    conn.close()
    return questions, answers, category_ids

# C·∫≠p nh·∫≠t danh m·ª•c t·ª´ PostgreSQL


def load_categories():
    conn = connect_to_postgresql()
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM categories")
    categories = cursor.fetchall()
    cursor.close()
    conn.close()
    return categories

# Th√™m c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi v√†o PostgreSQL


def add_to_postgresql(question, answer, category_id):
    conn = connect_to_postgresql()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO faq_test (question, answer, category_id) VALUES (%s, %s, %s)",
                   (question, answer, category_id))
    conn.commit()
    cursor.close()
    conn.close()

# C·∫≠p nh·∫≠t c√¢u h·ªèi trong c∆° s·ªü d·ªØ li·ªáu


def update_question_in_db(question_id, new_question, new_answer, new_category_id):
    conn = connect_to_postgresql()
    cursor = conn.cursor()
    cursor.execute("""UPDATE faq_test
                      SET question = %s, answer = %s, category_id = %s
                      WHERE id = %s""",
                   (new_question, new_answer, new_category_id, question_id))
    conn.commit()
    cursor.close()
    conn.close()

# X√≥a c√¢u h·ªèi kh·ªèi c∆° s·ªü d·ªØ li·ªáu


def delete_question_from_db(question_id):
    conn = connect_to_postgresql()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM faq_test WHERE id = %s", (question_id,))
    conn.commit()
    cursor.close()
    conn.close()


# Streamlit UI
st.set_page_config(page_title="Chatbot Gi·∫£i ƒê√°p", page_icon="üí¨")

st.title("Chatbot Gi·∫£i ƒê√°p Th·∫Øc M·∫Øc üí¨")

tab1, tab2 = st.tabs(["üí¨ Chatbot", "üõ†Ô∏è Th√™m d·ªØ li·ªáu"])

# Load d·ªØ li·ªáu t·ª´ PostgreSQL
questions, answers, category_ids = load_from_postgresql()

# Load categories
categories = load_categories()
category_names = [category[1] for category in categories]

# L∆∞u l·ªãch s·ª≠ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
history = []

# Tab 1: Chatbot
with tab1:
    st.write("Xin ch√†o! M√¨nh l√† chatbot h·ªó tr·ª£ gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc c·ªßa sinh vi√™n VKU. B·∫°n c√≥ th·ªÉ h·ªèi m√¨nh b·∫•t k·ª≥ ƒëi·ªÅu g√¨ li√™n quan ƒë·∫øn tr∆∞·ªùng!")

    # Th√™m selectbox ƒë·ªÉ l·ªçc c√¢u h·ªèi theo danh m·ª•c
    selected_category = st.selectbox("Ch·ªçn danh m·ª•c c√¢u h·ªèi:", category_names)

    # L·ªçc c√¢u h·ªèi theo danh m·ª•c
    filtered_questions = [q for q, cid in category_ids.items(
    ) if category_names[cid-1] == selected_category]

    user_input = st.text_input(
        "Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:", placeholder="V√≠ d·ª•: V·ªã tr√≠ c·ªßa tr∆∞·ªùng VKU ·ªü ƒë√¢u?")

    if user_input:
        # S·ª≠ d·ª•ng h√†m extractOne t·ª´ rapidfuzz ƒë·ªÉ t√¨m c√¢u h·ªèi g·∫ßn nh·∫•t
        result = process.extractOne(
            user_input, filtered_questions, score_cutoff=70)

        if result:
            best_match, score = result[:2]
            st.success(f"**C√¢u tr·∫£ l·ªùi:** {answers[best_match]}")
            # L∆∞u l·ªãch s·ª≠ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
            history.append(
                {"question": user_input, "answer": answers[best_match]})
        else:
            st.warning(
                "Xin l·ªói, m√¨nh ch∆∞a t√¨m th·∫•y th√¥ng tin ph√π h·ª£p. B·∫°n th·ª≠ h·ªèi l·∫°i nh√©!")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
    st.write("L·ªãch s·ª≠ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi:")
    for item in history:
        st.write(f"**C√¢u h·ªèi**: {item['question']}")
        st.write(f"**C√¢u tr·∫£ l·ªùi**: {item['answer']}")

    # Ch·ª©c nƒÉng ƒë√°nh gi√° ph·∫£n h·ªìi
    if len(history) > 0:
        st.write("B·∫°n c√≥ th·∫•y c√¢u tr·∫£ l·ªùi n√†y h·ªØu √≠ch?")
        feedback = st.radio("Ch·ªçn m·ªôt ƒë√°nh gi√°:", ("H·ªØu √≠ch", "Kh√¥ng h·ªØu √≠ch"))
        if feedback == "H·ªØu √≠ch":
            st.success("C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° t√≠ch c·ª±c!")
        else:
            st.warning("C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°. Ch√∫ng t√¥i s·∫Ω c·∫£i thi·ªán h∆°n!")

# Tab 2: Th√™m d·ªØ li·ªáu
with tab2:
    st.write("B·∫°n c√≥ th·ªÉ th√™m c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi m·ªõi v√†o chatbot.")
    category_id = st.selectbox("Ch·ªçn ch·ªß ƒë·ªÅ cho c√¢u h·ªèi:", category_names)
    new_question = st.text_input("Nh·∫≠p c√¢u h·ªèi m·ªõi:")
    new_answer = st.text_area("Nh·∫≠p c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi tr√™n:")

    if st.button("Th√™m v√†o d·ªØ li·ªáu"):
        if new_question and new_answer:
            # L·∫•y id c·ªßa category ƒë√£ ch·ªçn
            selected_category_id = next(
                category[0] for category in categories if category[1] == category_id)
            # Th√™m c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi v√†o c∆° s·ªü d·ªØ li·ªáu
            add_to_postgresql(new_question, new_answer, selected_category_id)
            # C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu tr√™n UI
            questions.append(new_question)
            answers[new_question] = new_answer
            category_ids[new_question] = selected_category_id
            st.success("C√¢u h·ªèi m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o c∆° s·ªü d·ªØ li·ªáu PostgreSQL!")
        else:
            st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi.")

    # Ch·ªânh s·ª≠a c√¢u h·ªèi
    st.write("Ch·ªânh s·ª≠a c√¢u h·ªèi trong c∆° s·ªü d·ªØ li·ªáu.")
    selected_question = st.selectbox("Ch·ªçn c√¢u h·ªèi c·∫ßn ch·ªânh s·ª≠a:", questions)

    if selected_question:
        selected_question_id = list(
            answers.keys()).index(selected_question) + 1
        current_answer = answers[selected_question]
        current_category = category_ids[selected_question]
        category_name = next(cat[1]
                             for cat in categories if cat[0] == current_category)

        new_question = st.text_input("C√¢u h·ªèi m·ªõi:", value=selected_question)
        new_answer = st.text_area("C√¢u tr·∫£ l·ªùi m·ªõi:", value=current_answer)
        new_category = st.selectbox(
            "Ch·ªçn ch·ªß ƒë·ªÅ m·ªõi:", category_names, index=category_names.index(category_name))

        if st.button("C·∫≠p nh·∫≠t c√¢u h·ªèi"):
            new_category_id = next(
                category[0] for category in categories if category[1] == new_category)
            update_question_in_db(selected_question_id,
                                  new_question, new_answer, new_category_id)
            st.success("C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")

    # X√≥a c√¢u h·ªèi
    st.write("X√≥a c√¢u h·ªèi kh·ªèi c∆° s·ªü d·ªØ li·ªáu.")
    selected_question_for_delete = st.selectbox(
        "Ch·ªçn c√¢u h·ªèi ƒë·ªÉ x√≥a:", questions)

    if selected_question_for_delete:
        selected_question_id = list(answers.keys()).index(
            selected_question_for_delete) + 1

        if st.button("X√≥a c√¢u h·ªèi"):
            delete_question_from_db(selected_question_id)
            st.success("C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi c∆° s·ªü d·ªØ li·ªáu!")
