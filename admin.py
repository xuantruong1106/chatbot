import streamlit as st
import pandas as pd
from connectsql import (is_question_duplicate, load_faq, add_faq, load_unanswered_questions, show_statistics, update_faq, delete_faq, connect_to_postgresql)
from pathlib import Path
import os
from transformers import pipeline
from sentence_transformers import SentenceTransformer
from PyPDF2 import PdfReader
from sentence_transformers import util

docs_path = Path("docs")
docs_path.mkdir(exist_ok=True)


def handle_csv_upload():
    uploaded_file = st.file_uploader("T·∫£i l√™n file CSV", type=["csv"])

    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)

            # Ki·ªÉm tra c√°c c·ªôt c·ªßa CSV ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ c·ªôt 'question' v√† 'answer'
            if 'question' in df.columns and 'answer' in df.columns:
                progress_bar = st.progress(0)
                progress_text = st.empty()
                total_questions = len(df)

                for index, row in df.iterrows():
                    question = row['question']
                    answer = row['answer']

                    if is_question_duplicate(question):
                        st.warning(
                            f"C√¢u h·ªèi '{question}' ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu v√† kh√¥ng ƒë∆∞·ª£c th√™m.")
                    else:
                        add_faq(question, answer)
                        st.success(
                            f"C√¢u h·ªèi '{question}' ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!")

                    progress = (index + 1) / total_questions
                    progress_bar.progress(progress)
                    progress_text.text(f"ƒêang x·ª≠ l√Ω: {int(progress * 100)}%")

                st.success("Ho√†n th√†nh vi·ªác hu·∫•n luy·ªán t·ª´ file CSV!")
            else:
                st.error("File CSV kh√¥ng ch·ª©a c√°c c·ªôt 'question' v√† 'answer'.")
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω file CSV: {e}")


def is_question_duplicate(question):
    try:
        conn = connect_to_postgresql()
        cursor = conn.cursor()

        cursor.execute(
            "SELECT COUNT(*) FROM faq WHERE question = %s", (question,))
        count = cursor.fetchone()[0]

        cursor.close()
        conn.close()

        return count > 0
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra c√¢u h·ªèi: {e}")
        return False

def filter_duplicate_questions(questions, model):
    embeddings = model.encode(questions, convert_to_tensor=True)
    cosine_scores = util.pytorch_cos_sim(embeddings, embeddings)
    
    filtered_questions = []
    for i, question in enumerate(questions):
        if all(cosine_scores[i][j] < 0.85 for j in range(len(filtered_questions))):
            filtered_questions.append(question)
    return filtered_questions

# Chunking function


def split_text_into_chunks(text, chunk_size=512, overlap=50):
    words = text.split()
    chunks = []
    for i in range(0, len(words), chunk_size - overlap):
        chunks.append(" ".join(words[i:i + chunk_size]))
    return chunks

# Embedding generation function


def generate_embeddings(chunks):
    model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
    embeddings = model.encode(chunks, show_progress_bar=True)
    return embeddings

# Question generation function


def generate_questions_and_answers_from_chunks(chunks):
    question_answer_pairs = []
    question_generator = pipeline(
        "text2text-generation", model="google/flan-t5-base", num_beams=5)  # Added beam search

    answer_generator = pipeline(
        "question-answering", model="deepset/roberta-base-squad2")

    for chunk in chunks:
        # Generate questions with beam search (allows multiple sequences)
        generated_questions = question_generator(
            chunk, max_length=128, num_return_sequences=5, num_beams=5, early_stopping=True)  # Now supports num_return_sequences = 2 with beam search

        for question in generated_questions:
            question_text = question['generated_text']
            # Generate answers based on the question and chunk of text
            answer = answer_generator(
                question=question_text, context=chunk, max_answer_length=50)['answer']
            question_answer_pairs.append((question_text, answer))

    return question_answer_pairs


# Function to extract text from PDF


def get_pdf_text(pdf_path):
    reader = PdfReader(pdf_path)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    return text





# -------------------An----------------------------------------



def admin_interface():
    if not st.session_state.get('authenticated', False):
        st.warning("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc.")
        st.stop()

    # Sidebar
    with st.sidebar:
        st.header("üîê Th√¥ng tin t√†i kho·∫£n")
        st.write(f"**üë§ T√™n ng∆∞·ªùi d√πng:** {st.session_state['username']}")
        st.write(f"**üîì Vai tr√≤:** {'Admin' if st.session_state['username'] == 'admin' else 'Ng∆∞·ªùi d√πng'}")
        st.divider()
        if st.button("üö™ƒêƒÉng xu·∫•t"):
            st.session_state['authenticated'] = False
            st.rerun()

    st.title("‚ú® Qu·∫£n l√Ω D·ªØ li·ªáu Chatbot")

    # Tabs ch√≠nh
    tab_add, tab_edit, tab_load_logs, tab_statistics , tab_generate_question = st.tabs(
        ["‚ûï Th√™m D·ªØ Li·ªáu", "‚úèÔ∏è Ch·ªânh S·ª≠a D·ªØ Li·ªáu", "üìã Danh S√°ch C√¢u H·ªèi Ch∆∞a Tr·∫£ L·ªùi", "üìä Th·ªëng K√™", "T·ª± T·∫°o C√¢u H·ªèi"]
    )

    with tab_add:
        st.header("‚ûï Th√™m D·ªØ li·ªáu")
        st.markdown("### Nh·∫≠p th√¥ng tin c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi:")
        col1, col2 = st.columns(2)
        with col1:
            question = st.text_input("C√¢u h·ªèi:")
        with col2:
            answer = st.text_area("C√¢u tr·∫£ l·ªùi:")
        
        st.markdown("---")
        if st.button("Th√™m v√†o FAQ", key="add_data"):
            if question and answer:
                if add_faq(question, answer):
                    st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!")
                else:
                    st.warning("‚ö†Ô∏è C√¢u h·ªèi n√†y ƒë√£ t·ªìn t·∫°i!")
            else:
                st.error("‚õî Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")

        with st.expander("üìÑ Upload File PDF"):
            uploaded_pdf = st.file_uploader("Ch·ªçn file PDF:", type="pdf")
            if uploaded_pdf:
                pdf_path = docs_path / uploaded_pdf.name
                with open(pdf_path, "wb") as f:
                    f.write(uploaded_pdf.getbuffer())
                st.success(f"üìÇ File **{uploaded_pdf.name}** ƒë√£ ƒë∆∞·ª£c l∆∞u!")

    with tab_edit:
        st.header("‚úèÔ∏è Ch·ªânh s·ª≠a D·ªØ li·ªáu")  # Th√™m bi·ªÉu t∆∞·ª£ng cho ti√™u ƒë·ªÅ
        questions, faq_data = load_faq()  # Gi·∫£ s·ª≠ faq_data ch·ª©a c·∫£ c√¢u tr·∫£ l·ªùi

        # H·ªôp ch·ªçn c√¢u h·ªèi v·ªõi bi·ªÉu t∆∞·ª£ng
        selected_question = st.selectbox("üîç Ch·ªçn c√¢u h·ªèi:", questions)

        # T√¨m c√¢u tr·∫£ l·ªùi t∆∞∆°ng ·ª©ng v·ªõi c√¢u h·ªèi ƒë√£ ch·ªçn
        current_answer = faq_data[selected_question]

        # Nh·∫≠p c√¢u h·ªèi m·ªõi v√† c√¢u tr·∫£ l·ªùi m·ªõi
        new_question = st.text_input("‚úèÔ∏è C·∫≠p nh·∫≠t c√¢u h·ªèi:", value=selected_question)
        new_answer = st.text_area("üìù C·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi:", value=current_answer)  # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi c≈©

        col1, col2 = st.columns(2)

        # C·ªôt C·∫≠p nh·∫≠t v·ªõi bi·ªÉu t∆∞·ª£ng
        with col1:
            if st.button("‚úîÔ∏è C·∫≠p nh·∫≠t", key="update_data"):
                update_faq(selected_question, new_question, new_answer)
                st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")

        # C·ªôt X√≥a v·ªõi bi·ªÉu t∆∞·ª£ng
        with col2:
            if st.button("‚ùå X√≥a", key="delete_data"):
                delete_faq(selected_question)
                st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a!")

    with tab_load_logs:
        st.header("üìã Qu·∫£n l√Ω C√¢u H·ªèi Ch∆∞a Tr·∫£ L·ªùi")
        logs = load_unanswered_questions()
        if logs:
            questions = [log[0] for log in logs]  # Thay ƒë·ªïi ch·ªâ s·ªë
            selected_question = st.selectbox("‚ùì C√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi:", questions, key="unanswered_questions_selectbox")
            
            st.markdown("### ‚úèÔ∏è Nh·∫≠p c√¢u tr·∫£ l·ªùi:")
            answer = st.text_area("C√¢u tr·∫£ l·ªùi:", key="unanswered_questions_textarea")
            
            col1, col2 = st.columns([1, 3])
            with col1:
                if st.button("üíæ L∆∞u", key="save_log_answer"):
                    if selected_question and answer:
                        if add_faq(selected_question, answer):
                            st.success("‚úÖ C√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c l∆∞u!")
                        else:
                            st.warning("‚ö†Ô∏è C√¢u h·ªèi ƒë√£ t·ªìn t·∫°i!")
                    else:
                        st.error("‚õî Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            with col2:
                st.empty()  # Gi·ªØ kho·∫£ng tr·ªëng ƒë·ªÉ cƒÉn ch·ªânh n√∫t l∆∞u
        else:
            st.info("üì≠ Kh√¥ng c√≥ c√¢u h·ªèi ch∆∞a ƒë∆∞·ª£c tr·∫£ l·ªùi.")
            
    with tab_statistics:
        show_statistics()

    with tab_generate_question:
            st.subheader("T·ª± ƒë·ªông sinh c√¢u h·ªèi t·ª´ t√†i li·ªáu PDF")

            # List available PDFs
            docs = [file.name for file in docs_path.iterdir()
                    if file.suffix == ".pdf"]
            selected_doc = st.selectbox("Ch·ªçn t√†i li·ªáu:", docs)

            if st.button("Sinh c√¢u h·ªèi"):
                pdf_path = docs_path / selected_doc
                pdf_text = get_pdf_text(pdf_path)  # Extract text from PDF

                if pdf_text.strip():
                    # Chunk the text
                    chunks = split_text_into_chunks(pdf_text)

                    # Generate embeddings (optional, not used in this example)
                    embeddings = generate_embeddings(chunks)

                    # Generate questions
                    question_answer_pairs = generate_questions_and_answers_from_chunks(
                        chunks)

                    if question_answer_pairs:
                        for question, answer in question_answer_pairs:
                            st.write(f"**C√¢u h·ªèi:** {question}")
                            st.write(f"**C√¢u tr·∫£ l·ªùi:** {answer}")
                            if st.button(f"L∆∞u c√¢u h·ªèi: {question, answer}"):
                                # Save question without an answer
                                add_faq(question, answer)
                                st.success("C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
                    else:
                        st.warning("Kh√¥ng th·ªÉ sinh c√¢u h·ªèi t·ª´ t√†i li·ªáu n√†y.")
                else:
                    st.error(
                        "Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung t·ª´ file PDF. Vui l√≤ng ki·ªÉm tra l·∫°i file.")
