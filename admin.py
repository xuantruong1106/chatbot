from sentence_transformers import SentenceTransformer
import streamlit as st
import pandas as pd
import torch
from connectsql import (
    connect_to_postgresql, is_question_duplicate, load_faq, add_faq,
    load_unanswered_logs, load_unanswered_questions, show_statistics, update_faq, delete_faq
)
from pathlib import Path
from transformers import pipeline
from sentence_transformers import util
from PyPDF2 import PdfReader
from transformers import pipeline, GPT2LMHeadModel, GPT2Tokenizer

docs_path = Path("D:\\chatbot\\docs")


def is_question_duplicate(question):
    try:
        conn = connect_to_postgresql()
        cursor = conn.cursor()

        cursor.execute(
            "SELECT COUNT(*) FROM faq WHERE question = %s", (question,))
        count = cursor.fetchone()[0]

        cursor.close()
        conn.close()

        return count > 0
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra c√¢u h·ªèi: {e}")
        return False


def get_pdf_text(pdf_path):
    reader = PdfReader(pdf_path)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    return text


def split_text_into_chunks(text, chunk_size=1024, overlap=50):
    words = text.split()
    chunks = []
    for i in range(0, len(words), chunk_size - overlap):
        chunks.append(" ".join(words[i:i + chunk_size]))
    return chunks

# Embedding generation function


def generate_embeddings(chunks):
    model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
    embeddings = model.encode(chunks, show_progress_bar=True)
    return embeddings


def generate_questions_and_answers_from_chunks(chunks):
    try:
        # Initialize question generation pipeline
        question_generator = pipeline(
            "text2text-generation",
            model="facebook/bart-large-cnn",
            max_length=128,
            device=0 if torch.cuda.is_available() else -1
        )

        # Initialize answer generation pipeline
        answer_generator = pipeline(
            "text2text-generation",
            model="facebook/bart-large-cnn",
            max_length=256,
            device=0 if torch.cuda.is_available() else -1
        )

        question_answer_pairs = []

        for chunk in chunks:
            if len(chunk.strip()) < 50:  # Skip very short chunks
                continue

            # Generate questions
            input_text = f"generate question: {chunk}"
            questions = question_generator(input_text, num_return_sequences=2)

            for q in questions:
                question = q['generated_text'].strip()

                # Generate answer
                context = f"answer question: {question}\ncontext: {chunk}"
                answer = answer_generator(context, num_return_sequences=1)[
                    0]['generated_text']

                if len(question) > 10 and len(answer) > 20:  # Basic quality check
                    question_answer_pairs.append((question, answer))

        return question_answer_pairs

    except Exception as e:
        print(f"Error in question generation: {e}")
        return []


def admin_interface():
    if not st.session_state.get('authenticated', False):
        st.warning("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc.")
        st.stop()

    # Sidebar
    with st.sidebar:
        st.header("üîê Th√¥ng tin t√†i kho·∫£n")
        st.write(f"**üë§ T√™n ng∆∞·ªùi d√πng:** {st.session_state['username']}")
        st.write(
            f"**üîì Vai tr√≤:** {'Admin' if st.session_state['username'] == 'admin' else 'Ng∆∞·ªùi d√πng'}")
        st.divider()
        if st.button("üö™ƒêƒÉng xu·∫•t"):
            st.session_state['authenticated'] = False
            st.rerun()

    st.title("‚ú® Qu·∫£n l√Ω D·ªØ li·ªáu Chatbot")

    # Tabs ch√≠nh
    tab_add, tab_edit, tab_load_logs, tab_statistics, tab_generate_question = st.tabs(
        ["‚ûï Th√™m D·ªØ li·ªáu", "‚úèÔ∏è Ch·ªânh s·ª≠a D·ªØ li·ªáu",
            "üìã Qu·∫£n l√Ω Log", "Th·ªëng k√™", "ü™Ñ D·ª± ƒëo√°n d·ªØ li·ªáu"]
    )

    with tab_add:
        st.header("‚ûï Th√™m D·ªØ li·ªáu")
        st.markdown("### Nh·∫≠p th√¥ng tin c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi:")
        col1, col2 = st.columns(2)
        with col1:
            question = st.text_input("C√¢u h·ªèi:")
        with col2:
            answer = st.text_area("C√¢u tr·∫£ l·ªùi:")

        st.markdown("---")
        if st.button("Th√™m v√†o FAQ", key="add_data"):
            if question and answer:
                if add_faq(question, answer):
                    st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!")
                else:
                    st.warning("‚ö†Ô∏è C√¢u h·ªèi n√†y ƒë√£ t·ªìn t·∫°i!")
            else:
                st.error("‚õî Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")

        with st.expander("üìÑ Upload File PDF"):
            uploaded_pdf = st.file_uploader("Ch·ªçn file PDF:", type="pdf")
            if uploaded_pdf:
                pdf_path = docs_path / uploaded_pdf.name
                with open(pdf_path, "wb") as f:
                    f.write(uploaded_pdf.getbuffer())
                st.success(f"üìÇ File **{uploaded_pdf.name}** ƒë√£ ƒë∆∞·ª£c l∆∞u!")

        st.markdown("---")
        st.subheader("üìÑ Upload File Excel")

        uploaded_excel = st.file_uploader(
            "Ch·ªçn file Excel ƒë·ªÉ upload:", type=["xlsx", "xls"])

        if uploaded_excel:
            try:
                df = pd.read_excel(uploaded_excel)
                if st.button("Th√™m d·ªØ li·ªáu t·ª´ Excel", key="add_from_excel"):
                    added_count = 0
                    skipped_count = 0
                    for _, row in df.iterrows():
                        question, answer = row['Question'], row['Answer']
                        if question and answer:
                            if is_question_duplicate(question):
                                skipped_count += 1  # ƒê·∫øm s·ªë c√¢u h·ªèi b·ªã b·ªè qua
                            else:
                                if add_faq(question, answer):
                                    added_count += 1  # ƒê·∫øm s·ªë c√¢u h·ªèi ƒë∆∞·ª£c th√™m
                    st.success(
                        f"‚úÖ ƒê√£ th√™m {added_count} c√¢u h·ªèi t·ª´ file Excel!")
                    if skipped_count > 0:
                        st.warning(
                            f"‚ö†Ô∏è B·ªè qua {skipped_count} c√¢u h·ªèi do ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu.")
                else:
                    st.error("‚õî File Excel ph·∫£i c√≥ c·ªôt 'Question' v√† 'Answer'!")
            except Exception as e:
                st.error(f"‚õî L·ªói khi ƒë·ªçc file Excel: {e}")

    with tab_edit:
        st.header("‚úèÔ∏è Ch·ªânh s·ª≠a D·ªØ li·ªáu")  # Th√™m bi·ªÉu t∆∞·ª£ng cho ti√™u ƒë·ªÅ
        questions, faq_data = load_faq()  # Gi·∫£ s·ª≠ faq_data ch·ª©a c·∫£ c√¢u tr·∫£ l·ªùi

        # H·ªôp ch·ªçn c√¢u h·ªèi v·ªõi bi·ªÉu t∆∞·ª£ng
        selected_question = st.selectbox("üîç Ch·ªçn c√¢u h·ªèi:", questions)

        # T√¨m c√¢u tr·∫£ l·ªùi t∆∞∆°ng ·ª©ng v·ªõi c√¢u h·ªèi ƒë√£ ch·ªçn
        current_answer = faq_data[selected_question]

        # Nh·∫≠p c√¢u h·ªèi m·ªõi v√† c√¢u tr·∫£ l·ªùi m·ªõi
        new_question = st.text_input(
            "‚úèÔ∏è C·∫≠p nh·∫≠t c√¢u h·ªèi:", value=selected_question)
        # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi c≈©
        new_answer = st.text_area(
            "üìù C·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi:", value=current_answer)

        col1, col2 = st.columns(2)

        # C·ªôt C·∫≠p nh·∫≠t v·ªõi bi·ªÉu t∆∞·ª£ng
        with col1:
            if st.button("‚úîÔ∏è C·∫≠p nh·∫≠t", key="update_data"):
                update_faq(selected_question, new_question, new_answer)
                st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")

        # C·ªôt X√≥a v·ªõi bi·ªÉu t∆∞·ª£ng
        with col2:
            if st.button("‚ùå X√≥a", key="delete_data"):
                delete_faq(selected_question)
                st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a!")

    with tab_statistics:
        show_statistics()
        
    with tab_load_logs:
        st.header("üìã Qu·∫£n l√Ω C√¢u H·ªèi Ch∆∞a Tr·∫£ L·ªùi")
        logs = load_unanswered_questions()
        if logs:
            questions = [log[0] for log in logs]  # Thay ƒë·ªïi ch·ªâ s·ªë
            selected_question = st.selectbox(
                "‚ùì C√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi:", questions, key="unanswered_questions_selectbox")

            st.markdown("### ‚úèÔ∏è Nh·∫≠p c√¢u tr·∫£ l·ªùi:")
            answer = st.text_area(
                "C√¢u tr·∫£ l·ªùi:", key="unanswered_questions_textarea")

            col1, col2 = st.columns([1, 3])
            with col1:
                if st.button("üíæ L∆∞u", key="save_log_answer"):
                    if selected_question and answer:
                        if add_faq(selected_question, answer):
                            st.success("‚úÖ C√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c l∆∞u!")
                        else:
                            st.warning("‚ö†Ô∏è C√¢u h·ªèi ƒë√£ t·ªìn t·∫°i!")
                    else:
                        st.error("‚õî Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            with col2:
                st.empty()  # Gi·ªØ kho·∫£ng tr·ªëng ƒë·ªÉ cƒÉn ch·ªânh n√∫t l∆∞u
        else:
            st.info("üì≠ Kh√¥ng c√≥ c√¢u h·ªèi ch∆∞a ƒë∆∞·ª£c tr·∫£ l·ªùi.")

    with tab_generate_question:
        st.subheader("T·ª± ƒë·ªông sinh c√¢u h·ªèi t·ª´ t√†i li·ªáu PDF")

        # List available PDFs
        docs = [file.name for file in docs_path.iterdir()
                if file.suffix == ".pdf"]
        selected_doc = st.selectbox("Ch·ªçn t√†i li·ªáu:", docs)

        if st.button("Sinh c√¢u h·ªèi"):
            pdf_path = docs_path / selected_doc
            pdf_text = get_pdf_text(pdf_path)  # Extract text from PDF

            if pdf_text.strip():
                # Chia vƒÉn b·∫£n th√†nh c√°c ƒëo·∫°n nh·ªè
                chunks = split_text_into_chunks(pdf_text)

                print(chunks)

                # Sinh c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi t·ª´ c√°c ƒëo·∫°n vƒÉn b·∫£n
                question_answer_pairs = generate_questions_and_answers_from_chunks(
                    chunks)

                print(question_answer_pairs)

                # Hi·ªÉn th·ªã c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
                if question_answer_pairs:
                    for question, answer in question_answer_pairs:
                        st.write(f"**C√¢u h·ªèi:** {question}")
                        st.write(f"**C√¢u tr·∫£ l·ªùi:** {answer}")
                        if st.button(f"L∆∞u c√¢u h·ªèi: {question}"):
                            # L∆∞u c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi v√†o database
                            add_faq(question, answer)
                            st.success("C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
                else:
                    st.warning("Kh√¥ng th·ªÉ sinh c√¢u h·ªèi t·ª´ t√†i li·ªáu n√†y.")
            else:
                st.error(
                    "Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung t·ª´ file PDF. Vui l√≤ng ki·ªÉm tra l·∫°i file.")
